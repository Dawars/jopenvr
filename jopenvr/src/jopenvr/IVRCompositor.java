package jopenvr;

import com.sun.jna.Callback;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class IVRCompositor extends Structure {

    /**
     * C type : SetTrackingSpace_callback*
     */
    public IVRCompositor.SetTrackingSpace_callback SetTrackingSpace;
    /**
     * C type : GetTrackingSpace_callback*
     */
    public IVRCompositor.GetTrackingSpace_callback GetTrackingSpace;
    /**
     * C type : WaitGetPoses_callback*
     */
    public IVRCompositor.WaitGetPoses_callback WaitGetPoses;
    /**
     * C type : GetLastPoses_callback*
     */
    public IVRCompositor.GetLastPoses_callback GetLastPoses;
    /**
     * C type : GetLastPoseForTrackedDeviceIndex_callback*
     */
    public IVRCompositor.GetLastPoseForTrackedDeviceIndex_callback GetLastPoseForTrackedDeviceIndex;
    /**
     * C type : Submit_callback*
     */
    public IVRCompositor.Submit_callback Submit;
    /**
     * C type : ClearLastSubmittedFrame_callback*
     */
    public IVRCompositor.ClearLastSubmittedFrame_callback ClearLastSubmittedFrame;
    /**
     * C type : PostPresentHandoff_callback*
     */
    public IVRCompositor.PostPresentHandoff_callback PostPresentHandoff;
    /**
     * C type : GetFrameTiming_callback*
     */
    public IVRCompositor.GetFrameTiming_callback GetFrameTiming;
    /**
     * C type : GetFrameTimeRemaining_callback*
     */
    public IVRCompositor.GetFrameTimeRemaining_callback GetFrameTimeRemaining;
    /**
     * C type : FadeToColor_callback*
     */
    public IVRCompositor.FadeToColor_callback FadeToColor;
    /**
     * C type : FadeGrid_callback*
     */
    public IVRCompositor.FadeGrid_callback FadeGrid;
    /**
     * C type : SetSkyboxOverride_callback*
     */
    public IVRCompositor.SetSkyboxOverride_callback SetSkyboxOverride;
    /**
     * C type : ClearSkyboxOverride_callback*
     */
    public IVRCompositor.ClearSkyboxOverride_callback ClearSkyboxOverride;
    /**
     * C type : CompositorBringToFront_callback*
     */
    public IVRCompositor.CompositorBringToFront_callback CompositorBringToFront;
    /**
     * C type : CompositorGoToBack_callback*
     */
    public IVRCompositor.CompositorGoToBack_callback CompositorGoToBack;
    /**
     * C type : CompositorQuit_callback*
     */
    public IVRCompositor.CompositorQuit_callback CompositorQuit;
    /**
     * C type : IsFullscreen_callback*
     */
    public IVRCompositor.IsFullscreen_callback IsFullscreen;
    /**
     * C type : GetCurrentSceneFocusProcess_callback*
     */
    public IVRCompositor.GetCurrentSceneFocusProcess_callback GetCurrentSceneFocusProcess;
    /**
     * C type : GetLastFrameRenderer_callback*
     */
    public IVRCompositor.GetLastFrameRenderer_callback GetLastFrameRenderer;
    /**
     * C type : CanRenderScene_callback*
     */
    public IVRCompositor.CanRenderScene_callback CanRenderScene;
    /**
     * C type : ShowMirrorWindow_callback*
     */
    public IVRCompositor.ShowMirrorWindow_callback ShowMirrorWindow;
    /**
     * C type : HideMirrorWindow_callback*
     */
    public IVRCompositor.HideMirrorWindow_callback HideMirrorWindow;
    /**
     * C type : IsMirrorWindowVisible_callback*
     */
    public IVRCompositor.IsMirrorWindowVisible_callback IsMirrorWindowVisible;
    /**
     * C type : CompositorDumpImages_callback*
     */
    public IVRCompositor.CompositorDumpImages_callback CompositorDumpImages;
    /**
     * C type : ShouldAppRenderWithLowResources_callback*
     */
    public IVRCompositor.ShouldAppRenderWithLowResources_callback ShouldAppRenderWithLowResources;
    /**
     * C type : ForceInterleavedReprojectionOn_callback*
     */
    public IVRCompositor.ForceInterleavedReprojectionOn_callback ForceInterleavedReprojectionOn;

    public interface SetTrackingSpace_callback extends Callback {

        void apply(int eOrigin);
    };

    public interface GetTrackingSpace_callback extends Callback {

        int apply();
    };

    public interface WaitGetPoses_callback extends Callback {

        int apply(TrackedDevicePose_t pRenderPoseArray, int unRenderPoseArrayCount, TrackedDevicePose_t pGamePoseArray, int unGamePoseArrayCount);
    };

    public interface GetLastPoses_callback extends Callback {

        int apply(TrackedDevicePose_t pRenderPoseArray, int unRenderPoseArrayCount, TrackedDevicePose_t pGamePoseArray, int unGamePoseArrayCount);
    };

    public interface GetLastPoseForTrackedDeviceIndex_callback extends Callback {

        int apply(int unDeviceIndex, TrackedDevicePose_t pOutputPose, TrackedDevicePose_t pOutputGamePose);
    };

    public interface Submit_callback extends Callback {

        int apply(int eEye, Texture_t pTexture, VRTextureBounds_t pBounds, int nSubmitFlags);
    };

    public interface ClearLastSubmittedFrame_callback extends Callback {

        void apply();
    };

    public interface PostPresentHandoff_callback extends Callback {

        void apply();
    };

    public interface GetFrameTiming_callback extends Callback {

        byte apply(Compositor_FrameTiming pTiming, int unFramesAgo);
    };

    public interface GetFrameTimeRemaining_callback extends Callback {

        float apply();
    };

    public interface FadeToColor_callback extends Callback {

        void apply(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, byte bBackground);
    };

    public interface FadeGrid_callback extends Callback {

        void apply(float fSeconds, byte bFadeIn);
    };

    public interface SetSkyboxOverride_callback extends Callback {

        int apply(Texture_t pTextures, int unTextureCount);
    };

    public interface ClearSkyboxOverride_callback extends Callback {

        void apply();
    };

    public interface CompositorBringToFront_callback extends Callback {

        void apply();
    };

    public interface CompositorGoToBack_callback extends Callback {

        void apply();
    };

    public interface CompositorQuit_callback extends Callback {

        void apply();
    };

    public interface IsFullscreen_callback extends Callback {

        byte apply();
    };

    public interface GetCurrentSceneFocusProcess_callback extends Callback {

        int apply();
    };

    public interface GetLastFrameRenderer_callback extends Callback {

        int apply();
    };

    public interface CanRenderScene_callback extends Callback {

        byte apply();
    };

    public interface ShowMirrorWindow_callback extends Callback {

        void apply();
    };

    public interface HideMirrorWindow_callback extends Callback {

        void apply();
    };

    public interface IsMirrorWindowVisible_callback extends Callback {

        byte apply();
    };

    public interface CompositorDumpImages_callback extends Callback {

        void apply();
    };

    public interface ShouldAppRenderWithLowResources_callback extends Callback {

        byte apply();
    };

    public interface ForceInterleavedReprojectionOn_callback extends Callback {

        void apply(byte bOverride);
    };

    public IVRCompositor() {
        super();
    }

    protected List<?> getFieldOrder() {
        return Arrays.asList("SetTrackingSpace", "GetTrackingSpace", "WaitGetPoses", "GetLastPoses", "GetLastPoseForTrackedDeviceIndex", "Submit", "ClearLastSubmittedFrame", "PostPresentHandoff", "GetFrameTiming", "GetFrameTimeRemaining", "FadeToColor", "FadeGrid", "SetSkyboxOverride", "ClearSkyboxOverride", "CompositorBringToFront", "CompositorGoToBack", "CompositorQuit", "IsFullscreen", "GetCurrentSceneFocusProcess", "GetLastFrameRenderer", "CanRenderScene", "ShowMirrorWindow", "HideMirrorWindow", "IsMirrorWindowVisible", "CompositorDumpImages", "ShouldAppRenderWithLowResources", "ForceInterleavedReprojectionOn");
    }

    public IVRCompositor(Pointer peer) {
        super(peer);
    }

    public static class ByReference extends IVRCompositor implements Structure.ByReference {

    };

    public static class ByValue extends IVRCompositor implements Structure.ByValue {

    };
}
